package com.ShadowMaze.render;

import com.ShadowMaze.model.Player;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.*;

/**
 * Class chá»‹u trÃ¡ch nhiá»‡m váº½ nhÃ¢n váº­t chÃ­nh vá»›i animation.
 */
public class PlayerRenderer {

    private Player player;
    private Animation<TextureRegion> animation;
    private float stateTime;

    private boolean facingLeft = false; // HÆ°á»›ng nhÃ¢n váº­t (trÃ¡i/pháº£i)

    public PlayerRenderer(Player player, Animation<TextureRegion> animation) {
        this.player = player;
        this.animation = animation;
        this.stateTime = 0f;

        // Ä?áº£m báº£o texture khÃ´ng bá»‹ má»? (nÃ©t pixel rÃµ)
        for (TextureRegion frame : animation.getKeyFrames()) {
            frame.getTexture().setFilter(Texture.TextureFilter.Nearest, Texture.TextureFilter.Nearest);
        }
    }

    public void update(float delta) {
        stateTime += delta;
    }

    /**
     * Váº½ nhÃ¢n váº­t, há»— trá»£ playerY Ä‘á»ƒ Ä‘iá»?u chá»‰nh chiá»?u cao khi nháº£y/rÆ¡i.
     *
     * @param batch SpriteBatch tá»« GameScreen
     * @param tileSize KÃ­ch thÆ°á»›c Ã´
     * @param offsetX Ä?á»™ lá»‡ch X
     * @param offsetY Ä?á»™ lá»‡ch Y
     * @param playerY Vá»‹ trÃ­ phá»¥ theo trá»¥c Y (Ä‘á»ƒ nháº£y mÆ°á»£t hÆ¡n)
     */
    public void render(SpriteBatch batch,int tileSize, int offsetX, int offsetY) {
        float drawX = offsetX + player.getRenderX() * tileSize;
        float drawY = offsetY + player.getRenderY() * tileSize;

        TextureRegion frame = animation.getKeyFrame(stateTime, true);

        // Flip náº¿u hÆ°á»›ng di chuyá»ƒn thay Ä‘á»•i (tuá»³ má»Ÿ rá»™ng sau nÃ y)
        if (facingLeft && !frame.isFlipX()) {
            frame.flip(true, false);
        } else if (!facingLeft && frame.isFlipX()) {
            frame.flip(true, false);
        }
        float scale = 2.8f; // Phóng to nhân v?t g?p 2 l?n

        float drawWidth = tileSize * scale;
        float drawHeight = tileSize * scale;

// C?n gi?a nhân v?t (n?u b?n mu?n nó v?n n?m gi?a ô l??i)
        float offsetDrawX = drawX - (drawWidth - tileSize) / 2f;
        float offsetDrawY = drawY - (drawHeight - tileSize) / 2f + 40;

        batch.draw(frame, offsetDrawX, offsetDrawY, drawWidth, drawHeight);
        batch.draw(frame, drawX, drawY, tileSize, tileSize);
    }

    // ================= Getter / Setter =================
    public Player getPlayer() {
        return player;
    }

    public void setPlayer(Player player) {
        this.player = player;
    }

    public Animation<TextureRegion> getAnimation() {
        return animation;
    }

    public void setAnimation(Animation<TextureRegion> animation) {
        this.animation = animation;
    }

    public float getStateTime() {
        return stateTime;
    }

    public void setStateTime(float stateTime) {
        this.stateTime = stateTime;
    }

    public void setFacingLeft(boolean facingLeft) {
        this.facingLeft = facingLeft;
    }

    public boolean isFacingLeft() {
        return facingLeft;
    }
}
